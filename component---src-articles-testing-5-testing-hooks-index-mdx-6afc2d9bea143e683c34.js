(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"sb/F":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return u}));var o=n("Fcif"),r=n("+I+c"),a=(n("mXGw"),n("/FXl")),s=n("TjRS"),i=(n("aD51"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/articles/testing/5-testing-hooks/index.mdx"}});var l={_frontmatter:i},c=s.a;function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)(c,Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"testing-hooks"},"Testing Hooks"),Object(a.b)("p",null,"Yay! We've come this far. Now the only thing that's left is testing the Hooks. How hard can it be, right? After all, it's just a function, so we just test it like a function, right? Well, I kind of lied to you, sorry. Actually, if you know your way around functional programming (",Object(a.b)("a",{parentName:"p",href:"https://mostly-adequate.gitbook.io/mostly-adequate-guide/"},"you should!, btw"),"), you may have been screaming this whole time that PFCs are not strictly Pure Functions. The same applies to hooks. Yes, hooks are just plain functions, and some of them can even be pure functions. But they aren't Pure by nature. Far from it."),Object(a.b)("p",null,"So, to cut a long story short I'll just let the authors of ",Object(a.b)("inlineCode",{parentName:"p"},"@testing-library/react-hooks")," ",Object(a.b)("a",{parentName:"p",href:"https://react-hooks-testing-library.com/"},"speak for themselves"),", as I can't possibly explain it any better or more concisely."),Object(a.b)("hr",null),Object(a.b)("h3",{id:"the-problem"},Object(a.b)("em",{parentName:"h3"},"The problem")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"You're writing an awesome custom hook and you want to test it, but as soon as you call it you see the following error:")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("em",{parentName:"p"},"Invariant Violation: Hooks can only be called inside the body of a function component."))),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"You don't really want to write a component solely for testing this hook and have to work out how you were going to trigger all the various ways the hook can be updated, especially given the complexities of how you've wired the whole thing together.")),Object(a.b)("h3",{id:"the-solution"},Object(a.b)("em",{parentName:"h3"},"The solution")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"The ",Object(a.b)("inlineCode",{parentName:"em"},"react-hooks-testing-library")," allows you to create a simple test harness for React hooks that handles running them within the body of a function component, as well as providing various useful utility functions for updating the inputs and retrieving the outputs of your amazing custom hook. This library aims to provide a testing experience as close as possible to natively using your hook from within a real component.")),Object(a.b)("hr",null),Object(a.b)("p",null,"So, looks like we're in the right place."),Object(a.b)("h3",{id:"install-testing-libraryreact-hooks"},"Install ",Object(a.b)("inlineCode",{parentName:"h3"},"@testing-library/react-hooks")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Yes! Go ahead and copy it from here. Nobody's looking...")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"yarn add --dev @testing-library/react-hooks")),Object(a.b)("h2",{id:"writing-tests-for-a-hook"},"Writing tests for a Hook"),Object(a.b)("p",null,"Let's take a moment to remember the ",Object(a.b)("inlineCode",{parentName:"p"},"useCounterController")," hook from the ",Object(a.b)("a",{parentName:"p",href:"/building-serious-react-stuff/testing/separating-concerns-with-hooks"},"previous example")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"export const useCounterController = (\n  initialValue = 0,\n  increment = 1\n): CounterUIProps => {\n  const [currentValue, setCurrentValue] = useState(initialValue);\n  const increase = () =>\n    setCurrentValue((currentValue) => currentValue + increment);\n  const decrease = () =>\n    setCurrentValue((currentValue) => currentValue - increment);\n\n  return {\n    currentValue,\n    increase,\n    decrease,\n  };\n};\n")),Object(a.b)("p",null,"Notice below how easy it is to actually test the code that really matters"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},'import { renderHook, act } from "@testing-library/react-hooks";\nimport { useCounterController } from "./useCounterController";\n\ndescribe(() => {\n  it("should increment and decrement values correctly", () => {\n    const { result } = renderHook(() => useCounterController(0));\n\n    // Call the "increase" function...\n    act(() => result.current.increase());\n\n    // ...and simply expect it to be `1`\n    expect(result.current.currentValue).toBe(1);\n\n    act(() => result.current.decrease());\n\n    expect(result.current.currentValue).toBe(0);\n  });\n\n  it("should work from a custom initial value", () => {\n    const { result } = renderHook(() => useCounterController(9000));\n\n    act(() => result.current.increase());\n\n    expect(result.current.currentValue).toBe(9001);\n\n    act(() => result.current.decrease());\n\n    expect(result.current.currentValue).toBe(9000);\n  });\n\n  it("should work from a custom increment value", () => {\n    const { result } = renderHook(() => useCounterController(3000, 2));\n\n    act(() => result.current.increase());\n\n    expect(result.current.currentValue).toBe(3002);\n\n    act(() => result.current.decrease());\n\n    expect(result.current.currentValue).toBe(3002);\n  });\n});\n')),Object(a.b)("p",null,"Simple, concise, composable and even better: It ensures we can ",Object(a.b)("strong",{parentName:"p"},"ALWAYS")," reach 100% code coverage for interaction code, without going through the hassle of testing the component itself."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"(Please notice this is a Work in Progress. Found anything amiss? Your PR is always welcome)")))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/articles/testing/5-testing-hooks/index.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-articles-testing-5-testing-hooks-index-mdx-6afc2d9bea143e683c34.js.map